// Generated by CodiumAI

describe("fetchApiData", () => {
  // Successfully fetches data from the API and returns it
  it("should successfully fetch data from the API and return it", async () => {
    const todoId = 1;
    const expectedData = {
      id: 1,
      title: "delectus aut autem",
      completed: false,
    };
    axios.get.mockResolvedValue({ data: expectedData });

    const result = await fetchApiData(todoId);

    expect(result).toEqual(expectedData);
    expect(axios.get).toHaveBeenCalledWith(
      `https://jsonplaceholder.typicode.com/todos/${todoId}`
    );
  });

  // Handles different types of todoId inputs (string, number, etc.) and fetches the corresponding data
  it("should handle different types of todoId inputs and fetch the corresponding data", async () => {
    const todoId = "2";
    const expectedData = {
      id: 2,
      title: "quis ut nam facilis et officia qui",
      completed: false,
    };
    axios.get.mockResolvedValue({ data: expectedData });

    const result = await fetchApiData(todoId);

    expect(result).toEqual(expectedData);
    expect(axios.get).toHaveBeenCalledWith(
      `https://jsonplaceholder.typicode.com/todos/${todoId}`
    );
  });

  // Returns data in the expected format (JSON)
  it("should return data in the expected format (JSON)", async () => {
    const todoId = 3;
    const expectedData = {
      id: 3,
      title: "fugiat veniam minus",
      completed: false,
    };
    axios.get.mockResolvedValue({ data: expectedData });

    const result = await fetchApiData(todoId);

    expect(result).toEqual(expectedData);
    expect(axios.get).toHaveBeenCalledWith(
      `https://jsonplaceholder.typicode.com/todos/${todoId}`
    );
  });

  // Handles invalid todoId inputs (null, undefined, negative numbers, etc.) and throws appropriate errors
  it("should handle invalid todoId inputs and throw appropriate errors", async () => {
    const todoId = null;

    await expect(fetchApiData(todoId)).rejects.toThrow();
  });

  // Handles network errors and throws appropriate errors
  it("should handle network errors and throw appropriate errors", async () => {
    const todoId = 5;
    axios.get.mockRejectedValue(new Error("Network Error"));

    await expect(fetchApiData(todoId)).rejects.toThrow();
  });

  // Handles timeouts and throws appropriate errors
  it("should handle timeouts and throw appropriate errors", async () => {
    const todoId = 6;
    axios.get.mockRejectedValue(new Error("timeout of 5000ms exceeded"));

    await expect(fetchApiData(todoId)).rejects.toThrow();
  });
});
